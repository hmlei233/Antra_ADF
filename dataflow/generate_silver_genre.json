{
	"name": "generate_silver_genre",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_movie2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silvergenre",
						"type": "DatasetReference"
					},
					"name": "genresink"
				},
				{
					"name": "moviegenresink"
				},
				{
					"dataset": {
						"referenceName": "silver_language",
						"type": "DatasetReference"
					},
					"name": "languagesink"
				},
				{
					"name": "silvermoviesink"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "window1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filterQuarantine"
				},
				{
					"name": "filterClean"
				},
				{
					"name": "addStatusLoaded"
				},
				{
					"name": "parse1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select6"
				},
				{
					"name": "join2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          datasource as string,",
				"          ingesttime as timestamp,",
				"          ingestdate as date,",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"select5 foldDown(unroll(genres),",
				"     mapColumn(",
				"          movie_id = Id,",
				"          genre_id = genres.id,",
				"          genre_name = genres.name",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> flatten1",
				"flatten1 select(mapColumn(",
				"          genre_id,",
				"          genre_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(genre_id),",
				"     genre_name = max(genre_name)) ~> aggregate1",
				"flatten1 select(mapColumn(",
				"          movie_id,",
				"          genre_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select5 select(mapColumn(",
				"          OriginalLanguageName = OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 window(over(OriginalLanguageName),",
				"     asc(OriginalLanguageName, true),",
				"     OriginalLanguageId = denseRank()) ~> window1",
				"window1 aggregate(groupBy(OriginalLanguageId),",
				"     OriginalLanguageName = max(OriginalLanguageName)) ~> aggregate2",
				"select5, aggregate2 join(OriginalLanguage == OriginalLanguageName,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          Tagline,",
				"          Budget,",
				"          Revenue,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          OriginalLanguageId,",
				"          ReleaseDate,",
				"          RunTime,",
				"          Price,",
				"          CreatedDate,",
				"          movie",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"parse1 select(mapColumn(",
				"          Id = movie2.Id,",
				"          Title = movie2.Title,",
				"          Overview = movie2.Overview,",
				"          Tagline = movie2.Tagline,",
				"          Budget = movie2.Budget,",
				"          Revenue = movie2.Revenue,",
				"          ImdbUrl = movie2.ImdbUrl,",
				"          TmdbUrl = movie2.TmdbUrl,",
				"          PosterUrl = movie2.PosterUrl,",
				"          BackdropUrl = movie2.BackdropUrl,",
				"          OriginalLanguage = movie2.OriginalLanguage,",
				"          ReleaseDate = movie2.ReleaseDate,",
				"          RunTime = movie2.RunTime,",
				"          Price = movie2.Price,",
				"          CreatedDate = movie2.CreatedDate,",
				"          genres = movie2.genres,",
				"          movie",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"source1 filter(status == \"new\") ~> filter1",
				"select4 filter(RunTime < 0) ~> filterQuarantine",
				"select4 filter(RunTime >= 0) ~> filterClean",
				"filterClean derive(status2 = \"loaded\") ~> addStatusLoaded",
				"derivedColumn1 parse(movie2 = movie2 ? (Id as integer,",
				"          Title as string,",
				"          Overview as string,",
				"          Tagline as string,",
				"          Budget as double,",
				"          Revenue as double,",
				"          ImdbUrl as string,",
				"          TmdbUrl as string,",
				"          PosterUrl as string,",
				"          BackdropUrl as string,",
				"          OriginalLanguage as string,",
				"          ReleaseDate as date,",
				"          RunTime as integer,",
				"          Price as double,",
				"          CreatedDate as date,",
				"          genres as (id as integer,",
				"     name as string)[]),",
				"     format: 'json',",
				"     documentForm: 'singleDocument') ~> parse1",
				"filter1 derive(movie2 = movie) ~> derivedColumn1",
				"addStatusLoaded select(mapColumn(",
				"          movie,",
				"          status2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6, source1 join(select6@movie == source1@movie,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 alterRow(upsertIf(isNull(status2))) ~> alterRow1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> genresink",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> moviegenresink",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> languagesink",
				"filterClean sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          Tagline,",
				"          Budget,",
				"          Revenue,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          OriginalLanguageId,",
				"          ReleaseDate,",
				"          RunTime,",
				"          Price,",
				"          CreatedDate,",
				"          UpdatedDate,",
				"          UpdatedBy,",
				"          CreatedBy",
				"     )) ~> silvermoviesink"
			]
		}
	}
}
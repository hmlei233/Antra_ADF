{
	"name": "generate_silver_genre",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronzemovie",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silvergenre",
						"type": "DatasetReference"
					},
					"name": "genresink"
				},
				{
					"name": "moviegenresink"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "window1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[]),",
				"          datasource as string,",
				"          ingesttime as timestamp,",
				"          ingestdate as date,",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source1 filter(status == \"new\") ~> filter1",
				"filter1 foldDown(unroll(movie.genres, movie.genres),",
				"     mapColumn(",
				"          genres = movie.genres,",
				"          movieid = movie.Id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> flatten1",
				"flatten1 select(mapColumn(",
				"          genre_id = genres.id,",
				"          genre_name = genres.name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(genre_id),",
				"     genre_name = max(genre_name)) ~> aggregate1",
				"flatten1 select(mapColumn(",
				"          movie_id = movieid,",
				"          genre_id = genres.id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"source1 select(mapColumn(",
				"          OriginalLanguageName = movie.OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 window(over(OriginalLanguageName),",
				"     asc(OriginalLanguageName, true),",
				"     OriginalLanguageId = denseRank()) ~> window1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> genresink",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> moviegenresink"
			]
		}
	}
}